package br.ufrj.cos.prisma;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.jgrapht.DirectedGraph;
import org.jgrapht.graph.DefaultDirectedGraph;
import org.jgrapht.graph.DefaultEdge;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class XPDLGraph {

	private static String ACTIVITY_TAG = "Activity";
	private static String TRANSITION_TAG = "Transition";
	
	public static HashMap<String, Node> nodesIds = new HashMap<String, Node>();

	public static DirectedGraph<Node, DefaultEdge> g = new DefaultDirectedGraph<Node, DefaultEdge>(
			DefaultEdge.class);

	public static void getGraph(File f) {

	}

	private static void createGraph(String fileUrl) {
		// read XPDL file
		Document doc = getDomObject(fileUrl);

		// get activity elements
		NodeList activitiesNodes = getNodesWithType(doc, ACTIVITY_TAG);
		createNodesForActivities(activitiesNodes);

		// get transition elements
		NodeList edges = getNodesWithType(doc, TRANSITION_TAG);

		// create nodes for activities
		
		// create edges for transitions
	}

	public static void createNodesForActivities(NodeList nodes) {
		for (int temp = 0; temp < nodes.getLength(); temp++) {
			Node node = nodes.item(temp);
			if (node == null || node.getNodeType() != Node.ELEMENT_NODE) {
				continue;
			}

			Element element = (Element) node;
			String id = element.getAttribute("Id");

			g.addVertex(node);
			nodesIds.put(id, node);
		}
	}
	
	private static void createEdges() {

	}

	public static Document getDomObject(String file) {
		File fXmlFile = new File(file);

		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder;
		Document doc = null;
		try {
			dBuilder = dbFactory.newDocumentBuilder();
			doc = dBuilder.parse(fXmlFile);
			doc.getDocumentElement().normalize();

		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return doc;
	}

	public static NodeList getNodesWithType(Document doc, String type) {
		return doc.getElementsByTagName(type);
	}

}
